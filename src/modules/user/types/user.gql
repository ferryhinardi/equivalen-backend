type User {
  id: ID!
  userStudent: UserStudent
  userTeacher: UserTeacher
  authProviders: [AuthProvider!]
  userSchools: [UserSchool!]
  userProfile: UserProfile
  userDevice: [UserDevice!]

  isStudent: Boolean
  isTeacher: Boolean
  token: String

  gender: Gender
  username: String
  fullName: String
  email: String
  phoneNumber: String
  photoUrl: String
  placeBod: String
  dateBod: Date
  biography: String
  createdAt: Date
  updatedAt: Date
}

input UserInput {
  id: ID
}

extend type Query {
  """
  Get User
  """
  user(phoneNumber: String): User
  """
  Get Current User Login
  """
  currentUser: User

  """
  Get list of users
  """
  users: [User!]
}

extend type Mutation {
  """
  Create Authenticated user as a student.
  """
  registerUserStudent(
    userProfile: UserProfileInput
    userSchool: UserSchoolInput
    userStudent: UserStudentInput
    userDevice: UserDeviceInput
  ): User

  """
  Create Authenticated user as a teacher.
  """
  registerUserTeacher(
    userProfile: UserProfileInput
    userSchool: UserSchoolInput
    userTeacher: UserTeacherInput
    userDevice: UserDeviceInput
  ): User

  """
  Verify email user.
  """
  verificationEmail(
    email: String
  ): LoginResponse

  """
  Forgot Password user.
  """
  forgotPassword(
    oldPassword: String
    newPassword: String
  ): Boolean
}
